apiVersion: app.infini.cloud/v1
kind: ApplicationDefinition
metadata:
  name: my-infini-gateway # 应用实例名称
  namespace: devops # 替换为你的命名空间
spec:
  components:
    - name: infini-gw-main # 组件实例名称 (会影响资源名称)
      type: gateway # 引用上面的 ComponentDefinition
      properties:
        # --- 核心配置 ---
        replicas: 1 # 副本数 (例如: 1 或 3)
        image:
          repository: docker.1ms.run/infinilabs/gateway # 目标镜像
          tag: 1.29.3-2018
        ports:
          - name: http-2900 # 主要应用端口
            containerPort: 2900
            protocol: TCP
          - name: http-8000 # 主要应用端口
            containerPort: 8000
            protocol: TCP
          # - name: metrics # 如果有其他端口
          #   containerPort: 9090
        storage: # StatefulSet 通常需要存储. 目前删除 Pod 不会删除 PVC，todo
          enabled: true
          size: 2Gi # <-- 按需调整存储大小
          mountPath: /app # <-- !!! 确认 infinilabs/gateway 数据/配置挂载路径 !!!
          volumeClaimTemplateName: data # VCT 名称 (通常与 mountPath 相关)
          accessModes:
            - ReadWriteOnce
          storageClassName: local-path # <--- !!! 替换为你集群中有效的 StorageClass !!!
#        serviceAccount:  # ServiceAccount 名称
#            create: false # 是否创建 ServiceAccount, 默认值为 false
#            name: controller-manager # <-- !!! 确认 ServiceAccount 名称 !!!
        # --- 可选配置 ---
        service: # 服务暴露配置
          type: NodePort # 使用 NodePort 便于测试，或 LoadBalancer
          ports:
            - name: http # Service 端口名称
              containerPort: 2900 # Service 监听的端口
               # targetPort: 8080 # 转发的目标 Pod 端口 (默认等于 containerPort)
               # nodePort: 30080 # 可选：指定 NodePort 端口
            - name: http # Service 端口名称
              containerPort: 8000 # Service 监听的端口
        resources:
          requests:
            cpu: "0.5" # 500m
            memory: "512Mi"
          limits:
            cpu: "1" # 1 Core
            memory: "1Gi"
        probes: # <-- 强烈建议根据实际情况配置健康检查
          liveness:
            httpGet:
              path: /_info # <-- !!! 确认健康检查路径 !!!
              port: 2900        # <-- !!! 确认健康检查端口 !!!
            initialDelaySeconds: 15 # 给予较长启动时间
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readiness:
            httpGet:
              path: /_info # <-- !!! 确认就绪检查路径 !!!
              port: 2900       # <-- !!! 确认就绪检查端口 !!!
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 5
        env:
          - name: GATEWAY_HEAP_SIZE # 示例环境变量
            value: "512m"
          - name: LOG_LEVEL
            value: "info"
        configMounts: # 需要配合 configFiles 告诉 Builder 如何挂载
          - name: infini-gw-main-config # 指向上面生成的 ConfigMap
            mountPath: /gateway.yml # 挂载配置文件的目录
            subPath: gateway.yml # 挂载单个文件
            readOnly: true
        configFiles: # 配置文件内容. configmap 有更新会自动重启gw
          "gateway.yml": |
            env:
              NODE_ID:
              NODE_ENDPOINT:
              TENANT_ID:
              GROUP_ID:
              CONFIG_SERVER:
              K8S_CLUSTER:
              K8S_NAMESPACE:
              K8S_CLUSTER_ID:
            
            path.data: /app/data
            path.logs: /app/log
            path.configs: /app/config # directory of additional gateway configurations
            configs.auto_reload: true # set true to auto reload gateway configurations
            
            node:
              id: $[[env.NODE_ID]]
              labels:
                endpoint: $[[env.NODE_ENDPOINT]]
                tenant_id: $[[env.TENANT_ID]]
                group_id: $[[env.GROUP_ID]]
                k8s_cluster_id: $[[env.K8S_CLUSTER_ID]]
            
            entry:
              - name: gateway_proxy
                enabled: true
                router: my_router
                network:
                  binding: 0.0.0.0:8000
                tls:
                  enabled: false
            
            api:
              enabled: true
              network:
                binding: 0.0.0.0:2900
              security:
                enabled: false
                username: admin
                password: $[[keystore.API_PASS]]
            
            router:
              - name: my_router
                default_flow: default_flow
            
            flow:
              - name: default_flow
                filter:
                  - context_parse:
                      context: _ctx.request.host
                      pattern: ^(?P<service>((easysearch|runtime|gateway)-[a-z0-9-]*|superset)).*?
                      group: "parsed_index"
                  - wildcard_domain:
                      when:
                        contains:
                          parsed_index.service: "runtime"
                      schema: "http" #https or http
                      max_idle_conn_duration: "900s"
                      suffix: $[[parsed_index.service]].$[[env.K8S_NAMESPACE]]
                      domain: "svc.$[[env.K8S_CLUSTER]]:2900"
                  - wildcard_domain:
                      when:
                        contains:
                          parsed_index.service: "gateway"
                      schema: "http" #https or http
                      max_idle_conn_duration: "900s"
                      suffix: $[[parsed_index.service]].$[[env.K8S_NAMESPACE]]
                      domain: "svc.$[[env.K8S_CLUSTER]]:2900"
                  - wildcard_domain:
                      when:
                        contains:
                          parsed_index.service: "easysearch"
                      schema: "https" #https or http
                      max_idle_conn_duration: "900s"
                      suffix: $[[parsed_index.service]].$[[env.K8S_NAMESPACE]]
                      domain: "svc.$[[env.K8S_CLUSTER]]:9200"
                  - wildcard_domain:
                      when:
                        contains:
                          parsed_index.service: "superset"
                      schema: "http" #https or http
                      max_idle_conn_duration: "900s"
                      suffix: $[[parsed_index.service]].$[[env.K8S_NAMESPACE]]
                      domain: "svc.$[[env.K8S_CLUSTER]]:8088"
